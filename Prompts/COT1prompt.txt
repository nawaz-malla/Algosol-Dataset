Translate the following Solidity smart contract into an equivalent Algorand Python smart contract following Step-by-Step Reasoning:

step 1. Identify Key Solidity Features
   - What are the contract's functions?  
   - What are the state variables?  
   - Does it use inheritance, mappings, or payable functions?
  

step 2. Find Algorand Equivalents
   - Convert Solidity contract structure to Algorand python using algopy class.  
   - Replace `payable` functions with `Txn.amount()`.  
   - Convert Solidity's `msg.sender` to `Txn.sender()`.  
   - Replace Solidity mappings with `Boxmap` or `Box Storage`.  

step 3. Write Algorand python Code 
   - Implement contract logic in algorand python.  
   - Ensure transaction security and permissions.  

step 4. Verify and Optimize  
   - Ensure contract logic follows Algorand python constraints. 
   - Ensure the correct import statements and data types.
   - Don't mix up algorand python and python data types. 
   - Optimize state storage and fees.  


Solidity Smart Contract:
------------------------------------------------
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Auction {
    uint256 public auctionEndBlock;
    uint256 public previousBid;
    uint256 public asaAmount;
    address public previousBidder;
    uint256 public assetId;
    address public creator;
    bool public isAuctionActive = true;

    mapping(address => uint256) public claimableAmounts;

    modifier onlyCreator() {
        require(msg.sender == creator, "Only creator can call this");
        _;
    }

    modifier onlyWhenActive() {
        require(isAuctionActive, "Auction is not active");
        _;
    }

    constructor() {
        creator = msg.sender;
    }

    function optIntoAsset(uint256 _assetId) external onlyCreator {
        require(assetId == 0, "Asset already opted in");
        assetId = _assetId;
    }

    function startAuction(uint256 startingPrice, uint256 blockDuration, uint256 assetAmount) 
        external 
        onlyCreator 
        onlyWhenActive 
    {
        require(auctionEndBlock == 0, "Auction already started");
        asaAmount = assetAmount;
        auctionEndBlock = block.number + blockDuration;
        previousBid = startingPrice;
    }

    function bid() external payable onlyWhenActive {
        require(block.number < auctionEndBlock, "Auction has ended");
        require(msg.value > previousBid, "Bid must be higher than previous bid");

        if (previousBidder != address(0)) {
            claimableAmounts[previousBidder] += previousBid;
        }

        previousBid = msg.value;
        previousBidder = msg.sender;
    }

    function claimBids() external {
        uint256 amount = claimableAmounts[msg.sender];
        require(amount > 0, "No claimable amount");

        claimableAmounts[msg.sender] = 0;
        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Transfer failed");
    }

    function claimAsset() external {
        require(block.number > auctionEndBlock, "Auction has not ended");
        require(msg.sender == previousBidder, "Only winner can claim asset");

    }

    function deleteAuction() external onlyCreator {
        isAuctionActive = false;
        payable(creator).transfer(address(this).balance);
    }
}


------------------------------------------------

Provide the translated Algorand Python code
